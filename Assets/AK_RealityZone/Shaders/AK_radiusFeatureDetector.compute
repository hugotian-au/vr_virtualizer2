//3D feature detector compute shader
//written by Hisham Bedri, Reality Lab, 2019

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel getFeatures

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float> depth_tex;
Texture2D<float2> distortion_tex;
Texture2D<float4> normal_tex;
RWTexture2D<float4> result_tex;

int search_size;
float proximity;
float result_multiplier;

int width;
int height;

[numthreads(8,8,1)]
void getFeatures(uint3 id : SV_DispatchThreadID)
{
	uint3 loc = uint3(id.x, id.y, id.z);
	float depth = depth_tex[loc.xy] * 65.536f;
	float2 distortion = distortion_tex[loc.xy].xy;
	float3 pos = float3(0.0, 0.0, 0.0);
	pos.x = depth * distortion.x;
	pos.y = depth * distortion.y;
	pos.z = depth;

	float3 normal = normal_tex[loc.xy].xyz;


	bool initialized = false;
	float max_radius = 0.0f;
	float min_radius = 0.0f;
	float mean_radius = 0.0f;

	int counter = 0;

	for (int xx = 0; xx < search_size; xx++) {
		for (int yy = 0; yy < search_size; yy++) {

			uint3 loc_p = uint3(id.x + xx, id.y + yy, id.z);
			float depth_p = depth_tex[loc_p.xy] * 65.536f;
			float2 distortion_p = distortion_tex[loc_p.xy].xy;
			float3 pos_p = float3(0.0, 0.0, 0.0);
			pos_p.x = depth_p * distortion_p.x;
			pos_p.y = depth_p * distortion_p.y;
			pos_p.z = depth_p;

			float3 normal_p = normal_tex[loc_p.xy].xyz;


			float dist = length(pos - pos_p);
			float angle = dot(normal, normal_p);

			float measure = sqrt(2)*dist*sqrt(1 - angle);

			if (dist < proximity) {
				if (!initialized) {
					max_radius = measure;
					min_radius = measure;
					initialized = true;
				}
				if (measure > max_radius) {
					max_radius = measure;
				}
				if (measure < min_radius) {
					min_radius = measure;
				}

				mean_radius += measure;

				counter++;

			}


		}
	}

	if (counter > 0) {
		mean_radius = mean_radius / float(counter);
	}

	//min_radius = 1.0;
	//max_radius = 1.0;

	//result_tex[id.xy] = result_multiplier*float4(min_radius, 0.0, max_radius, 1.0);
	result_tex[id.xy] = result_multiplier * float4(max_radius, 0.0, max_radius, 1.0);
	result_tex[id.xy] = result_multiplier * float4(mean_radius, 0.0, mean_radius, 1.0);
	//result_tex[id.xy] = result_multiplier * float4(max_radius - min_radius, 0.0, 0.0, 1.0);



	/*
	// TODO: insert actual code here!
	uint3 loc = uint3(id.x, id.y, id.z);
	//result_tex[id.xy] = float(depth_tex[loc.xy]);
	result_tex[id.xy] = float(normal_tex[loc.xy].x);
	//result_tex[id.xy] = float4(0.0, 1.0, 1.0, 1.0);
	*/
}


// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel cornerWalker

int num_points = 10;
int num_iterations = 10;
float gravity_x;
float gravity_y;
float gravity_z;

[numthreads(8, 8, 1)]
void cornerWalker(uint3 id : SV_DispatchThreadID)
{
	int stride = width / num_points;
	float3 gravity = float3(gravity_x, gravity_y, gravity_z);



	float depth = depth_tex[id.xy] * 65.536f;
	float2 distortion = distortion_tex[id.xy].xy;
	float3 pos = float3(0.0, 0.0, 0.0);
	pos.x = depth * distortion.x;
	pos.y = depth * distortion.y;
	pos.z = depth;




	result_tex[id.xy] = float4(depth / 3.0f, depth / 3.0f, depth / 3.0f, 1.0f);



	
	if (id.x%stride == 0 && id.y%stride == 0) {



		uint2 next_spot = uint2(id.x, id.y);
		float best_dist = length(pos - gravity);


		for (int xx = -5; xx < 5; xx++) {
			for (int yy = -5; yy < 5; yy++) {
				uint2 new_loc = uint2(next_spot.x + xx, next_spot.y + yy);
				//result_tex[new_loc.xy] = float4(0.0, 1.0, 1.0, 1.0);
			}
		}


		for (int i = 0; i < num_iterations; i++) {

			for (int xx = -search_size; xx < search_size+1; xx++) {
				for (int yy = -search_size; yy < search_size+1; yy++) {
					if (xx != 0 && yy != 0) {
						uint2 loc = uint2(next_spot.x + xx, next_spot.y + yy);
						float depth_p = depth_tex[loc.xy] * 65.536f;
						float2 distortion_p = distortion_tex[loc.xy].xy;
						float3 pos_p = float3(0.0, 0.0, 0.0);
						pos_p.x = depth_p * distortion_p.x;
						pos_p.y = depth_p * distortion_p.y;
						pos_p.z = depth_p;

						float dist = length(pos_p - gravity);

						if (dist < best_dist && depth_p != 0) {
							best_dist = dist;
							next_spot = loc;
						}

					}
				}
			}

		}

		if (depth > 0) {
			for (int xx = -3; xx < 3; xx++) {
				for (int yy = -3; yy < 3; yy++) {
					uint2 new_loc = uint2(next_spot.x + xx, next_spot.y + yy);
					result_tex[new_loc.xy] = float4(1.0, 0.0, 0.0, 1.0);
				}
			}

		}

	}
	
}



// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel getNormalDiff


[numthreads(8, 8, 1)]
void getNormalDiff(uint3 id : SV_DispatchThreadID)
{
	uint3 loc = uint3(id.x, id.y, id.z);
	float depth = depth_tex[loc.xy] * 65.536f;
	float2 distortion = distortion_tex[loc.xy].xy;
	float3 pos = float3(0.0, 0.0, 0.0);
	pos.x = depth * distortion.x;
	pos.y = depth * distortion.y;
	pos.z = depth;

	float3 normal = normal_tex[loc.xy].xyz;


	bool initialized = false;
	float max_diff = 0.0f;
	int counter = 0;
	bool valid = true;

	if (depth == 0) {
		valid = false;
	}
	/*

	//get diff x:
	int xx = 5;
	int yy = 0;
	uint3 loc_p = uint3(id.x + xx, id.y + yy, id.z);
	float depth_p = depth_tex[loc_p.xy] * 65.536f;
	float2 distortion_p = distortion_tex[loc_p.xy].xy;
	float3 pos_p = float3(0.0, 0.0, 0.0);
	pos_p.x = depth_p * distortion_p.x;
	pos_p.y = depth_p * distortion_p.y;
	pos_p.z = depth_p;

	float3 normal_p = normal_tex[loc_p.xy].xyz;

	float measure = length(normal - normal_p);
	max_diff = measure;

	if (depth_p == 0) {
		valid = false;
	}



	//get diff x:
	xx = 0;
	yy = 5;
	uint3 loc_py = uint3(id.x + xx, id.y + yy, id.z);
	float depth_py = depth_tex[loc_py.xy] * 65.536f;
	float2 distortion_py = distortion_tex[loc_py.xy].xy;
	float3 pos_py = float3(0.0, 0.0, 0.0);
	pos_py.x = depth_py * distortion_py.x;
	pos_py.y = depth_py * distortion_py.y;
	pos_py.z = depth_py;

	float3 normal_py = normal_tex[loc_py.xy].xyz;

	float measurey = length(normal - normal_py);
	max_diff = max_diff +  measurey;

	if (depth_py == 0) {
		valid = false;
	}
	*/

	//find mean:
	float3 mean = float3(0.0, 0.0, 0.0);
	for (int xx = 0; xx < search_size; xx++) {
		for (int yy = 0; yy < search_size; yy++) {

			uint3 loc_p = uint3(id.x + xx, id.y + yy, id.z);
			float depth_p = depth_tex[loc_p.xy] * 65.536f;
			float2 distortion_p = distortion_tex[loc_p.xy].xy;
			float3 pos_p = float3(0.0, 0.0, 0.0);
			pos_p.x = depth_p * distortion_p.x;
			pos_p.y = depth_p * distortion_p.y;
			pos_p.z = depth_p;

			float3 normal_p = normal_tex[loc_p.xy].xyz;

			float dist = length(pos - pos_p);
			if (dist < proximity) {
				mean = mean + normal_p;
				counter++;
			}


		}
	}

	if (counter > 0) {
		mean = mean / float(counter);
	}


	//find variance:
	float ssd = 0.0f;
	counter = 0;
	for (int xx = 0; xx < search_size; xx++) {
		for (int yy = 0; yy < search_size; yy++) {

			uint3 loc_p = uint3(id.x + xx, id.y + yy, id.z);
			float depth_p = depth_tex[loc_p.xy] * 65.536f;
			float2 distortion_p = distortion_tex[loc_p.xy].xy;
			float3 pos_p = float3(0.0, 0.0, 0.0);
			pos_p.x = depth_p * distortion_p.x;
			pos_p.y = depth_p * distortion_p.y;
			pos_p.z = depth_p;

			float3 normal_p = normal_tex[loc_p.xy].xyz;

			float dist = length(pos - pos_p);
			if (dist < proximity) {

				if (depth_p == 0) {
					//valid = false;
				}
				else {
					ssd = ssd + length(normal_p - normal);
					//ssd = ssd + abs(normal_p.z - normal.z);

					counter++;
				}

			}




		}
	}

	if (!valid) {
		ssd = 0.0;
	}
	else {
		if (counter > 0) {
			ssd = ssd / float(counter);
		}
		else {
			ssd = 0.0;
		}
	}


	/*
	for (int xx = 0; xx < search_size; xx++) {
		for (int yy = 0; yy < search_size; yy++) {

			uint3 loc_p = uint3(id.x + xx, id.y + yy, id.z);
			float depth_p = depth_tex[loc_p.xy] * 65.536f;
			float2 distortion_p = distortion_tex[loc_p.xy].xy;
			float3 pos_p = float3(0.0, 0.0, 0.0);
			pos_p.x = depth_p * distortion_p.x;
			pos_p.y = depth_p * distortion_p.y;
			pos_p.z = depth_p;

			float3 normal_p = normal_tex[loc_p.xy].xyz;


			float dist = length(pos - pos_p);
			float angle = dot(normal, normal_p);

			//float measure = sqrt(2)*dist*sqrt(1 - angle);
			float measure = length(normal - normal_p);

			if (dist < proximity) {

				max_diff = max_diff + measure;
				counter++;

				
				//if (!initialized) {
				//	max_diff = measure;
				//	//max_radius = measure;
				//	//min_radius = measure;
				//	initialized = true;
				//}
				//if (measure > max_diff) {
				//	max_diff = measure;
				//}
				

			}
			else {
				//valid = false;
			}

			if (depth_p == 0) {
				valid = false;
			}

		}
	}


	if (counter > 0) {
		max_diff = max_diff / float(counter);
	}
	else {
		max_diff = 0;
	}
		

	if (!valid) {
		max_diff = 0;
	}
	*/

	//min_radius = 1.0;
	//max_radius = 1.0;

	//result_tex[id.xy] = result_multiplier*float4(min_radius, 0.0, max_radius, 1.0);
	//result_tex[id.xy] = result_multiplier * float4(max_diff, 0.0, max_diff, 1.0);
	//result_tex[id.xy] = result_multiplier * float4(max_radius - min_radius, 0.0, 0.0, 1.0);

	//result_tex[id.xy] = result_multiplier * float4(normal.x, normal.y, normal.z, 1.0);
	result_tex[id.xy] = result_multiplier * float4(ssd, 0.0, ssd, 1.0);



	/*
	// TODO: insert actual code here!
	uint3 loc = uint3(id.x, id.y, id.z);
	//result_tex[id.xy] = float(depth_tex[loc.xy]);
	result_tex[id.xy] = float(normal_tex[loc.xy].x);
	//result_tex[id.xy] = float4(0.0, 1.0, 1.0, 1.0);
	*/
}




// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel getNormal

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float> depth_for_normal_tex;
Texture2D<float2> distortion_for_normal_tex; //only one of these will work at a time. todo: comment this better.
RWTexture2D<float4> normal_result_tex;

float normal_multiplier;
int normal_filter_size;

[numthreads(8, 8, 1)]
void getNormal(uint3 id : SV_DispatchThreadID)
{

	int normal_idx = 0; //legacy from AK_textureCube.compute
	int _filter_size = normal_filter_size; //legacy from AK_textureCube.compute 

	float mean_x = 0.0f;
	float mean_y = 0.0f;
	float mean_z = 0.0f;

	int N = _filter_size * _filter_size;

	int counter = 0;
	int delta = 1;


	for (int xx = 0; xx < _filter_size; xx++) {
		for (int yy = 0; yy < _filter_size; yy++) {
			//int xx = 0;
			//int yy = 0;

			int px = id.x + xx - _filter_size / 2;
			int py = id.y + yy - _filter_size / 2;

			uint3 loc = uint3(px, py, uint(normal_idx));
			uint3 loc_u = uint3(px, py + 1, uint(normal_idx));
			uint3 loc_r = uint3(px + 1, py, uint(normal_idx));

			float depth = depth_for_normal_tex[loc.xy] * 65.536f;
			float depth_u = depth_for_normal_tex[loc_u.xy] * 65.536f;
			float depth_r = depth_for_normal_tex[loc_r.xy] * 65.536f;

			float2 distortion = distortion_for_normal_tex[loc.xy].xy;
			//float distortion_y = distortion_cube_for_normal_cube[loc.xyz].y;
			float2 distortion_u = distortion_for_normal_tex[loc_u.xy].xy;
			//float distortion_y_u = distortion_cube_for_normal_cube[loc.xyz].y;
			float2 distortion_r = distortion_for_normal_tex[loc_r.xy].xy;
			//float distortion_y_r = distortion_cube_for_normal_cube[loc.xyz].y;

			bool valid = false;
			if ((depth != 0) && (depth_u != 0) && (depth_r != 0)) {
				valid = true;
			}

			float3 pos = float3(0.0, 0.0, 0.0);
			pos.x = depth * distortion.x;
			pos.y = depth * distortion.y;
			pos.z = depth;

			float3 pos_u = float3(0.0, 0.0, 0.0);
			pos_u.x = depth_u * distortion_u.x;
			pos_u.y = depth_u * distortion_u.y;
			pos_u.z = depth_u;

			float3 pos_r = float3(0.0, 0.0, 0.0);
			pos_r.x = depth_r * distortion_r.x;
			pos_r.y = depth_r * distortion_r.y;
			pos_r.z = depth_r;


			float3 v1 = pos_u - pos;
			float3 v2 = pos_r - pos;
			//float3 v1 = float3(-1, 0, 0);
			//float3 v2 = float3(0, 1, 0);
			float3 normal = normalize(cross(v2, v1));

			
			if (valid) {
				mean_x = mean_x + normal.x;
				mean_y = mean_y + normal.y;
				mean_z = mean_z + normal.z;

				//norm_x_array[counter] = normal.x;
				//norm_y_array[counter] = normal.y;
				//norm_z_array[counter] = normal.z;
				counter++;

			}
			
			

			/*
			if (valid) {
				mean_x = normal.z;
				mean_y = normal.z;
				mean_z = normal.z;
				counter = 1;
			}
			*/
			
		}
	}

	mean_x = mean_x / (float)counter;
	mean_y = mean_y / (float)counter;
	mean_z = mean_z / (float)counter;

	uint3 loc = uint3(id.x, id.y, uint(normal_idx));
	normal_result_tex[loc.xy] = normal_multiplier*float4(mean_x, mean_y, mean_z, 1.0f);
	//normal_result_tex[loc.xy] = float4(0.0,1.0,1.0,1.0f);
}
